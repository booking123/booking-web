<?php
/**
 * Created by PhpStorm.
 * User: unknownartist
 * Date: 1/21/14
 * Time: 12:06 PM
 */
namespace Razor\Frontend\Controllers;

use \User;

class LocationController extends FrontendBaseController{

    protected $_order = array(
        'sublocality',
        'sublocality_level_2',
        'sublocality_level_1',
        'locality',
        'natural_feature',
        'neighborhood',
        'point_of_interest',
        'route',
        'airport',
        'administrative_area_level_4',
        'administrative_area_level_3',
        'administrative_area_level_2',
        'administrative_area_level_1',
        'premise',
        'political',
        'transit_station',
        'street_address'
    );

    public function indexAction(){}

    protected function getGoogleLocationInfo( $locationName, $country ){
        usleep( 300000 );
        $ch = curl_init();
        echo 'http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=' . urlencode(utf8_encode($locationName)) . ',' . $country . '&language=en';

        curl_setopt($ch, CURLOPT_URL, 'http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=' . urlencode(utf8_encode($locationName)) . ',' . $country . '&language=en' );
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $response = json_decode( curl_exec( $ch ) );
        if ( $response->status == "OVER_QUERY_LIMIT" ) die('OVER_QUERY_LIMIT status');

        return $response;
    }

    protected function getGoogleLocationLatLngInfo( $lat, $lng ){
        usleep( 300000 );
        $ch = curl_init();
        echo "http://maps.googleapis.com/maps/api/geocode/json?latlng=".$lat.",".$lng."&sensor=true";
        curl_setopt($ch, CURLOPT_URL, "http://maps.googleapis.com/maps/api/geocode/json?latlng=".$lat.",".$lng."&sensor=true" );
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $response = json_decode( curl_exec( $ch ) );

        if ( $response->status == "OVER_QUERY_LIMIT" ) die('OVER_QUERY_LIMIT status');

        return $response;
    }

    protected function getGoogleLocationResponseKey( $response ){
        $result = array(
            'error' => false,
            'error_message' => '',
            'key' => -1,
            'key_string_value' => '',
            'order_position' => count( $this->_order )
        );

        $result_key = -1;
        $result_key_string = "";
        $order_position = count( $this->_order );

        // Find need key
        foreach ( $response->results AS $k => $v ){
            // Exclude political from Result Types
            $types = $v->types;

            if ( count($types) > 1 )
                $types = array_diff( $v->types, array('political') );

            if ( count($types) == 1 && $types[0] == "street_address" ){
                $types = array('street_address', 'sublocality', 'locality', 'administrative_area_level_2', 'administrative_area_level_1');
            }

            if ( count(array_intersect($this->_order, $types)) > 0 ){
                // Loop result to find correct locality name
                foreach( $v->address_components AS $key => $value ){
                    $tmp = array_intersect($value->types, $types);
                    if ( count( $tmp ) > 0 ){
                        foreach ( $tmp as $typeKey => $typeValue ){
                            if ( array_search($typeValue, $this->_order) !== false && array_search($typeValue, $this->_order) < $result['order_position'] ){
                                //$order_position = array_search($typeValue, $this->_order);
                                $result['order_position'] = array_search($typeValue, $this->_order);

                                // $result_key_string = $typeValue;
                                $result['key_string_value'] = $typeValue;

                                //$result_key = $k;
                                $result['key'] = $k;
                            }
                        }
                    }
                }
            }
        }
        return $result;
    }

    protected function getResponseArrUpdate( $response, $key_string, &$aUpdate ){
        // Update if we need it
        foreach( $response->address_components as $k => $v ){
            if ( !isset($aUpdate['GName']) && in_array($key_string, $v->types) ){
                $aUpdate['GName'] = $v->long_name;
            }

            if ( !isset($aUpdate['GName']) && in_array('administrative_area_level_1', $v->types) ){
                $aUpdate['AdminArea_lvl_1'] = $v->long_name;
            }

            if ( !isset($aUpdate['GName']) && in_array('administrative_area_level_2', $v->types) ){
                $aUpdate['AdminArea_lvl_2'] = $v->long_name;
            }
        }

        if ( $key_string == "street_address" ){
            $tmp = array('sublocality', 'locality', 'administrative_area_level_2', 'administrative_area_level_1');
            foreach( $response->address_components as $k => $v ){
                if ( count(array_intersect($tmp, $v->types)) > 0 ){
                    $aUpdate['GName'] = $v->long_name;
                    break;
                }
            }
        }

        return $aUpdate;
    }


    public function correctGnameAction(){
        //$c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        $c2 = mysql_connect('localhost', 'root', '');
        mysql_select_db('razor', $c2);

        $query = "
SELECT
	l.ID,
	l.Name,
	l.GName,
	l.Country,
	l.Latitude,
	l.Longitude
FROM
	location AS l
WHERE
    l.ID = 91880
            ";
        $result = mysql_query($query);

        $aGNames = array();
        while( $row = mysql_fetch_assoc($result) ){
            //var_dump($row);die();
            $aGNames[] = addslashes($row['GName']);
        }

        if ( count($aGNames) == 0 ) return;

        $query = "
            SELECT
	          l.ID,
	          l.Name,
	          l.Country
	        FROM
	          location as l
	        WHERE
	          l.GName in ('" . join("', '", $aGNames) . "') AND
	          l.ID = 91880
	        ORDER BY
	          l.GName ASC";
        $result = mysql_query( $query ) or die(mysql_error());

        while( $row = mysql_fetch_assoc( $result ) ){
            echo 'Processing: ' . utf8_encode($row['Name']) . ', ' . $row['Country'] . "\n";
            $response = getGoogleLocationInfo( urlencode(utf8_encode($row['Name'])), $row['Country'] );
            // $response = $this->getGoogleLocationInfo( "Vienna / 4. District", "AT" );
            // $response = $this->getGoogleLocationInfo( "Mouille%20Point", "ZA" );
            // $response = $this->getGoogleLocationInfo( urlencode(utf8_encode("Puebla de Vallbona")), "ES" );

            if ( $response->status != "OK" ){
                if ( $response->status == "OVER_QUERY_LIMIT" ) die('OVER_QUERY_LIMIT status');
                $query = "
                    UPDATE
                        location
                    SET
                        State = 'Invalid'
                    WHERE
                        ID = '" . $row['ID'] . "'
                ";
                mysql_query($query) or die( mysql_error() );
                echo "response->status: " . $response->status ."\n\n";
                continue;
            }

            $result_key = -1;
            $result_key_string = "";
            $order_position = count( $this->_order );

            // Find need key
            foreach ( $response->results AS $k => $v ){
                echo 'Key: ' . $k . "\n<br />";

                // Exclude political from Result Types
                $types = $v->types;
                if ( count($types) == 0 ){
                    $query = "
                        UPDATE
                            location
                        SET
                            State = 'Invalid'
                        WHERE
                            ID = '" . $row['ID'] . "'
                    ";

                    mysql_query($query) or die( mysql_error() );
                    break;
                }

                if ( count($types) > 1 )
                    $types = array_diff( $v->types, array('political') );

                echo 'Keys for search: ';
                var_dump( $types );
                echo "<br />\n";

                if ( count(array_intersect($this->_order, $types)) > 0 ){
                    // Loop result to find correct locality name
                    foreach( $v->address_components AS $key => $value ){
                        $tmp = array_intersect($value->types, $types);
                        if ( count( $tmp ) > 0 ){
                            foreach ( $tmp as $typeKey => $typeValue ){
                                if ( array_search($typeValue, $this->_order) !== false && array_search($typeValue, $this->_order) < $order_position ){
                                    $order_position = array_search($typeValue, $this->_order);
                                    $result_key_string = $typeValue;
                                    $result_key = $k;
                                }
                            }
                        }
                    }
                } else {
                    echo "Unknown types for: " . $row['Name']. ' | ' . $row['Country']."<br />";
                    var_dump( $types );
                    echo "<br />\n<br />\n";
                }
                echo "<br />\n";
            }

            // If there is no results than we do noting
            if ( $result_key == -1 ) {
                mysql_query('UPDATE location set State = "Notype" WHERE ID = ' . $row['ID']) or die (mysql_error());
                echo "No types found\n\n";
                continue;
            }

            $aUpdate = array(
                'State' => 'Created',
                'LocationType' => $result_key_string,/*join(',', array_diff( $response->results[$result_key]->types, array('political') ) ),*/
                'Longitude' => $response->results[$result_key]->geometry->location->lng,
                'Latitude' => $response->results[$result_key]->geometry->location->lat
            );

            // Update if we need it
            foreach( $response->results[$result_key]->address_components as $k => $v ){
                if ( !isset($aUpdate['GName']) && in_array($result_key_string, $v->types) ){
                    $aUpdate['GName'] = $v->long_name;
                }

                if ( !isset($aUpdate['GName']) && in_array('administrative_area_level_1', $v->types) ){
                    $aUpdate['AdminArea_lvl_1'] = $v->long_name;
                }

                if ( !isset($aUpdate['GName']) && in_array('administrative_area_level_2', $v->types) ){
                    $aUpdate['AdminArea_lvl_2'] = $v->long_name;
                }
            }

            echo 'Key to take: ' . $result_key ."\n";

            echo 'Key value to take: ' . $result_key_string ."\n";

            // die('position found');
            var_dump( $aUpdate );
            // die();
            echo 'Updating location[ID]: ' . $row['ID']."\n";
            echo "\n\n";

            die('__________________==========_________');

            $set = array();
            foreach ( $aUpdate AS $auk => $auv ){
                $set[] = $auk . " = '". addslashes($auv) . "'";
            }

            $query = "UPDATE location SET " . join(', ', $set) . " WHERE ID = " . $row['ID'];
            echo $query."\n";
            mysql_query( $query ) or die(mysql_error());
        }


    }

    public function processEmptyGnamesAction(){
        // $c2 = mysql_connect('localhost', 'root', '');
        $c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        mysql_select_db('razor', $c2);

        $query = "
            SELECT
                ID,
                Name,
                Country
            FROM
                location as l
            WHERE
                ( l.GName = ''
                OR ISNULL( l.GName ) )
                AND l.State = 'Created'
        ";
        $result = mysql_query($query);
        echo 'Need to process: ' . mysql_num_rows($result)."<br />\n";

        $i = 1;
        while ( $row = mysql_fetch_assoc($result) ){
            echo 'Processing: ' . $i . ' item - ' . $row['Name'] . '['.$row['ID'].'] | ' . $row['Country'] . '<br />'."\n";
            $googleInfo = $this->getGoogleLocationInfo( $row['Name'], $row['Country'] );
            $tmp = $this->getGoogleLocationResponseKey( $googleInfo );

            if ( $googleInfo->status == "ZERO_RESULTS" ) {
                $query = "UPDATE location SET State = 'Zeroresults' WHERE ID = '" . $row['ID'] . "'";
                mysql_query($query) or die( mysql_error() );
                continue;
            }

            if ( $tmp['key'] == -1 ){
                var_dump( $row );
                $query = 'UPDATE location set State = "Notype" WHERE ID = ' . $row['ID'];
                echo $query . "<br />\n";
                die( 'key = -1' );
                // mysql_query( $query ) or die (mysql_error());
            }

            $aUpdate = array(
                'State' => 'Created',
                'LocationType' => $tmp['key_string_value'],
                'Longitude' => $googleInfo->results[$tmp['key']]->geometry->location->lng,
                'Latitude' => $googleInfo->results[$tmp['key']]->geometry->location->lat
            );

            $this->getResponseArrUpdate( $googleInfo->results[$tmp['key']], $tmp['key_string_value'], $aUpdate );

            $set = array();
            foreach ( $aUpdate AS $auk => $auv ){
                $set[] = $auk . " = '". addslashes($auv) . "'";
            }

            $query = "UPDATE location SET " . join(', ', $set) . " WHERE ID = " . $row['ID'];
            echo $query."<br />\n";
            // mysql_query($query);
            $i++;
        }
    }

    public function processPropertyLocationAction(){
        $c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        mysql_select_db('razor', $c2);

        $query = "
SELECT
	p.*
FROM
	product as p
WHERE
    p.ID = 133874
        ";

        $result = mysql_query($query) or die( mysql_error() );

        while ( $row = mysql_fetch_assoc($result) ){
            $googleInfo = $this->getGoogleLocationLatLngInfo( $row['Latitude'], $row['Longitude'] );
            $tmp = $this->getGoogleLocationResponseKey( $googleInfo );

            if ( $googleInfo->status == "ZERO_RESULTS" ) {
                die('Zero results ololo');
            }

            $aUpdate = array();
            $this->getResponseArrUpdate( $googleInfo->results[$tmp['key']], $tmp['key_string_value'], $aUpdate );

            $query = "SELECT * FROM location WHERE GName = '" . addslashes( $aUpdate['GName']) . "'";
            $tmp_result = mysql_query( $query ) or die( mysql_error() );

            if ( mysql_num_rows( $tmp_result) > 0 ){
                $tmp_row = mysql_fetch_assoc($tmp_result);
                $query = "UPDATE product SET LocationID = ".$tmp_row['ID']." WHERE ID = " . $row['ID'];
            } else {
                // die('null here');
                $query = "UPDATE product SET LocationID = null WHERE ID = " . $row['ID'];
            }

            echo $query;
            mysql_query( $query );
        }
        die('End!');
    }

    public function processProductionLocationsAction(){
        $c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        mysql_select_db('razor', $c2);

        $query = "
select * from location where
State != 'Created' and
ID in (1860, 2041, 15756, 18554, 19010, 20768, 21762, 21775, 22217, 24956, 27554, 30184, 30232, 39384, 41551, 41593, 45438, 45512, 45607, 46219, 46389, 46667, 46678, 47307, 47500, 48280, 49750, 50665, 50709, 50945, 51017, 51018, 51104, 51228, 51759, 52859, 53783, 53916, 54384, 54652, 54799, 54858, 56453, 57396, 57523, 57635, 58479, 58482, 58663, 58757, 58777, 58786, 58789, 58792, 58809, 58812, 58814, 58825, 58833, 58838, 58857, 58885, 58925, 58935, 58961, 58975, 58976, 58977, 58978, 62482, 62483, 62486, 62487, 62488, 62495, 62502, 62505, 62506, 62507, 66300, 71002, 81449, 83463, 84522, 85110, 87882, 89713, 89714, 89715, 89716, 89717, 89718, 89719, 89720, 89721, 89722, 89723, 89725, 89726, 89727, 89728, 89730, 89731, 89761, 89762, 89764, 89765, 89766, 89767, 89769, 89770, 89772, 89773, 89775, 89776, 89777, 89778, 89779, 89780, 89781, 89783, 89784, 89785, 89786, 89787, 89789, 89790, 89791, 89792, 89793, 89794, 89795, 89796, 89797, 89798, 89799, 89800, 89801, 89803, 89804, 89805, 89806, 89808, 89809, 89811, 89812, 89814, 89815, 89821, 89822, 89823, 89826, 89827, 89828, 89829, 89830, 89831, 89832, 89833, 89834, 89835, 89836, 89837, 89838, 89839, 89840, 89841, 89842, 89843, 89844, 89845, 89846, 89847, 89849, 89850, 89851, 89852, 89853, 89854, 89855, 89856, 89860, 89861, 89862, 89863, 89864, 89865, 89866, 89867, 89868, 89869, 89870, 89871, 89872, 89873, 89874, 89875, 89876, 89877, 89878, 89936, 89937, 89938, 89939, 89940, 89941, 89942, 89943, 89944, 89948, 89949, 89951, 89952, 89953, 89954, 89955, 89956, 89957, 89958, 89959, 89960, 89961, 89962, 89963, 89964, 89965, 89966, 89967, 89968, 89969, 89970, 89971, 89972, 89973, 89974, 89975, 89976, 89977, 89978, 89979, 89980, 89981, 89982, 89983, 89984, 89985, 89986, 89987, 89988, 89989, 89990, 89991, 89993, 89994, 89995, 89996, 89997, 89998, 89999, 90000, 90001, 90002, 90003, 90004, 90043, 90044, 90045, 90046, 90047, 90048, 90049, 90050, 90051, 90052, 90053, 90054, 90055, 90056, 90057, 90058, 90059, 90060, 90061, 90062, 90063, 90064, 90065, 90066, 90067, 90069, 90070, 90071, 90072, 90074, 90075, 90076, 90077, 90078, 90079, 90080, 90081, 90082, 90083, 90084, 90085, 90086, 90087, 90088, 90089, 90090, 90091, 90092, 90093, 90094, 90095, 90096, 90097, 90098, 90099, 90100, 90101, 90102, 90103, 90104, 90105, 90106, 90107, 90108, 90109, 90110, 90111, 90113, 90114, 90115, 90116, 90117, 90118, 90119, 90120, 90121, 90122, 90123, 90124, 90125, 90126, 90127, 90128, 90129, 90130, 90131, 90132, 90133, 90134, 90135, 90136, 90137, 90138, 90139, 90140, 90141, 90142, 90143, 90144, 90145, 90146, 90147, 90148, 90149, 90150, 90151, 90152, 90153, 90154, 90155, 90156, 90157, 90158, 90159, 90160, 90161, 90162, 90163, 90164, 90165, 90166, 90167, 90168, 90169, 90170, 90171, 90172, 90173, 90174, 90175, 90176, 90177, 90178, 90179, 90180, 90181, 90182, 90183, 90184, 90185, 90186, 90187, 90188, 90189, 90190, 90191, 90192, 90193, 90194, 90195, 90196, 90197, 90198, 90199, 90200, 90201, 90202, 90203, 90204, 90205, 90206, 90207, 90208, 90209, 90210, 90211, 90212, 90213, 90214, 90215, 90216, 90217, 90218, 90219, 90220, 90221, 90222, 90223, 90224, 90225, 90226, 90227, 90228, 90229, 90230, 90231, 90232, 90233, 90234, 90235, 90236, 90237, 90238, 90239, 90240, 90241, 90242, 90243, 90244, 90245, 90246, 90247, 90248, 90249, 90250, 90251, 90252, 90253, 90254, 90255, 90256, 90257, 90258, 90259, 90260, 90261, 90269, 90270, 90271, 90272, 90273, 90274, 90275, 90276, 90277, 90278, 90279, 90280, 90281, 90282, 90283, 90284, 90285, 90286, 90287, 90288, 90289, 90290, 90291, 90292, 90293, 90294, 90295, 90296, 90297, 90298, 90299, 90300, 90301, 90302, 90303, 90304, 90305, 90306, 90307, 90308, 90309, 90310, 90311, 90312, 90313, 90314, 90315, 90316, 90317, 90318, 90319, 90320, 90321, 90322, 90323, 90324, 90325, 90326, 90327, 90328, 90329, 90330, 90377, 90378, 90379, 90380, 90381, 90382, 90383, 90384, 90385, 90386, 90387, 90388, 90389, 90390, 90391, 90392, 90393, 90394, 90395, 90397, 90398, 90399, 90400, 90401, 90402, 90403, 90404, 90405, 90406, 90407, 90408, 90409, 90410, 90411, 90412, 90413, 90414, 90415, 90416, 90417, 90418, 90419, 90420, 90421, 90422, 90423, 90425, 90426, 90427, 90428, 90429, 90430, 90431, 90432, 90433, 90434, 90435, 90436, 90437, 90438, 90439, 90440, 90441, 90442, 90443, 90444, 90445, 90446, 90447, 90448, 90449, 90450, 90451, 90452, 90453, 90454, 90455, 90456, 90457, 90458, 90459, 90460, 90464, 90465, 90466, 90467, 90468, 90469, 90470, 90471, 90472, 90473, 90474, 90475, 90476, 90477, 90478, 90479, 90480, 90481, 90482, 90483, 90484, 90485, 90486, 90487, 90488, 90489, 90490, 90491, 90493, 90494, 90495, 90499, 90500, 90501, 90502, 90503, 90504, 90505, 90506, 90507, 90508, 90509, 90510, 90511, 90512, 90513, 90514, 90515, 90516, 90517, 90518, 90519, 90520, 90521, 90522, 90523, 90524, 90525, 90526, 90527, 90528, 90529, 90530, 90531, 90532, 90533, 90534, 90535, 90536, 90537, 90538, 90539, 90540, 90541, 90542, 90543, 90544, 90545, 90546, 90547, 90548, 90549, 90550, 90551, 90552, 90553, 90554, 90555, 90556, 90557, 90558, 90559, 90560, 90561, 90562, 90563, 90564, 90565, 90566, 90567, 90568, 90569, 90570, 90571, 90572, 90573, 90574, 90575, 90576, 90577, 90578, 90579, 90580, 90581, 90582, 90583, 90584, 90585, 90586, 90587, 90588, 90589, 90591, 90592, 90593, 90595, 90596, 90597, 90598, 90601, 90602, 90603, 90604, 90605, 90606, 90607, 90608, 90609, 90610, 90611, 90612, 90613, 90614, 90615, 90616, 90617, 90618, 90619, 90620, 90621, 90622, 90623, 90624, 90625, 90626, 90627, 90628, 90629, 90630, 90631, 90632, 90633, 90634, 90635, 90636, 90637, 90638, 90639, 90640, 90641, 90642, 90643, 90644, 90645, 90646, 90647, 90648, 90649, 90650, 90651, 90652, 90653, 90654, 90655, 90656, 90657, 90658, 90659, 90660, 90661, 90662, 90663, 90664, 90665, 90666, 90667, 90668, 90669, 90670, 90671, 90672, 90673, 90674, 90675, 90676, 90677, 90678, 90679, 90680, 90681, 90682, 90683, 90684, 90685, 90686, 90687, 90688, 90689, 90690, 90691, 90692, 90693, 90694, 90695, 90696, 90697, 90698, 90699, 90700, 90701, 90702, 90703, 90704, 90705, 90706, 90707, 90708, 90709, 90710, 90711, 90712, 90713, 90714, 90715, 90716, 90717, 90718, 90719, 90720, 90721, 90722, 90723, 90724, 90725, 90726, 90727, 90728, 90729, 90730, 90731, 90732, 90733, 90734, 90735, 90736, 90737, 90738, 90739, 90740, 90741, 90742, 90743, 90744, 90745, 90746, 90747, 90748, 90749, 90750, 90751, 90752, 90753, 90754, 90755, 90756, 90757, 90758, 90759, 90760, 90761, 90762, 90763, 90764, 90765, 90766, 90767, 90768, 90769, 90770, 90771, 90772, 90773, 90774, 90775, 90776, 90777, 90778, 90779, 90780, 90781, 90782, 90783, 90784, 90785, 90786, 90787, 90788, 90789, 90790, 90791, 90792, 90793, 90794, 90795, 90796, 90797, 90798, 90799, 90800, 90801, 90802, 90803, 90806, 90807, 90808, 90809, 90810, 90812, 90814, 90815, 90816, 90817, 90818, 90819, 90820, 90821, 90822, 90823, 90824, 90825, 90826, 90827, 90828, 90829, 90830, 90831, 90832, 90833, 90834, 90835, 90836, 90837, 90838, 90839, 90840, 90841, 90842, 90843, 90844, 90845, 90847, 90848, 90849, 90850, 90851, 90852, 90853, 90854, 90855, 90856, 90857, 90858, 90859, 90860, 90861, 90862, 90863, 90864, 90866, 90867, 90868, 90869, 90870, 90871, 90872, 90873, 90874, 90875, 90876, 90877, 90878, 90879, 90880, 90881, 90882, 90883, 90884, 90885, 90886, 90887, 90888, 90889, 90890, 90891, 90892, 90893, 90894, 90895, 90896, 90897, 90898, 90899, 90900, 90901, 90902, 90903, 90904, 90905, 90906, 90907, 90908, 90909, 90910, 90911, 90912, 90913, 90914, 90915, 90916, 90917, 90918, 90919, 90920, 90921, 90922, 90923, 90924, 90925, 90926, 90927, 90928, 90929, 90930, 90931, 90932, 90933, 90934, 90935, 90936, 90937, 90938, 90939, 90940, 90941, 90942, 90943, 90944, 90945, 90946, 90947, 90948, 90949, 90950, 90951, 90952, 90953, 90954, 90955, 90956, 90957, 90958, 90959, 90960, 90961, 90962, 90963, 90964, 90965, 90966, 90967, 90968, 90969, 90970, 90971, 90972, 90973, 90974, 90975, 90976, 90977, 90978, 90979, 90980, 90981, 90982, 90983, 90984, 90985, 90986, 90987, 90988, 90989, 90990, 90991, 90992, 90993, 90994, 90995, 90996, 90997, 90998, 90999, 91000, 91001, 91002, 91003, 91004, 91005, 91006, 91007, 91008, 91009, 91010, 91011, 91012, 91013, 91014, 91015, 91016, 91017, 91018, 91019, 91020, 91021, 91022, 91023, 91024, 91025, 91026, 91027, 91028, 91029, 91030, 91031, 91032, 91033, 91034, 91035, 91036, 91037, 91038, 91039, 91040, 91041, 91042, 91043, 91044, 91045, 91046, 91047, 91048, 91049, 91050, 91051, 91052, 91053, 91054, 91055, 91056, 91057, 91058, 91059, 91060, 91061, 91062, 91063, 91064, 91065, 91066, 91067, 91068, 91069, 91070, 91103, 91104, 91106, 91107, 91108, 91109, 91110, 91111, 91112, 91113, 91114, 91115, 91116, 91117, 91118, 91119, 91120, 91121, 91122, 91123, 91124, 91125, 91126, 91127, 91128, 91129, 91130, 91131, 91132, 91133, 91134, 91135, 91136, 91137, 91138, 91139, 91140, 91141, 91142, 91143, 91144, 91145, 91146, 91147, 91148, 91149, 91150, 91151, 91152, 91153, 91154, 91155, 91156, 91157, 91158, 91159, 91160, 91161, 91162, 91163, 91164, 91165, 91166, 91167, 91168, 91169, 91170, 91171, 91172, 91173, 91174, 91175, 91176, 91177, 91178, 91179, 91180, 91181, 91182, 91183, 91184, 91185, 91186, 91187, 91188, 91189, 91190, 91191, 91192, 91193, 91194, 91195, 91196, 91197, 91198, 91199, 91200, 91201, 91202, 91203, 91204, 91205, 91206, 91207, 91208, 91209, 91210, 91212, 91213, 91214, 91215, 91216, 91217, 91218, 91219, 91220, 91221, 91222, 91224, 91225, 91226, 91227, 91228, 91229, 91230, 91231, 91232, 91233, 91234, 91235, 91238, 91239, 91240, 91241, 91242, 91244, 91245, 91246, 91247, 91248, 91249, 91250, 91251, 91252, 91253, 91254, 91255, 91256, 91257, 91258, 91259, 91260, 91261, 91262, 91263, 91264, 91265, 91266, 91267, 91268, 91269, 91270, 91271, 91273, 91274, 91275, 91276, 91277, 91278, 91279, 91280, 91281, 91282, 91283, 91285, 91286, 91287, 91288, 91289, 91290, 91291, 91292, 91293, 91294, 91295, 91296, 91297, 91298, 91306, 91307, 91308, 91309, 91310, 91311, 91312, 91313, 91314, 91315, 91316, 91317, 91318, 91319, 91320, 91321, 91322, 91323, 91324, 91325, 91326, 91327, 91328, 91329, 91330, 91331, 91332, 91333, 91334, 91335, 91336, 91337, 91338, 91339, 91340, 91341, 91342, 91343, 91344, 91345, 91346, 91347, 91348, 91383, 91384, 91385, 91386, 91387, 91388, 91389, 91390, 91391, 91392, 91393, 91394, 91436, 91437, 91439, 91440, 91441, 91442, 91443, 91444, 91445, 91446, 91447, 91448, 91449, 91450, 91451, 91452, 91453, 91454, 91455, 91457, 91458, 91459, 91460, 91461, 91462, 91463, 91464, 91465, 91466, 91467, 91468, 91470, 91471, 91472, 91473, 91474, 91475, 91476, 91477, 91478, 91479, 91480, 91481, 91482, 91483, 91484, 91485, 91486, 91487, 91488, 91489, 91490, 91491, 91492, 91493, 91494, 91495, 91496, 91497, 91498, 91499, 91500, 91501, 91502, 91503, 91504, 91505, 91506, 91507, 91508, 91510, 91511, 91512, 91513, 91514, 91515, 91516, 91517, 91518, 91519, 91520, 91521, 91522, 91523, 91524, 91525, 91526, 91527, 91528, 91529, 91530, 91531, 91532, 91533, 91534, 91535, 91536, 91537, 91538, 91539, 91540, 91541, 91542, 91544, 91545, 91546, 91547, 91548, 91549, 91574, 91575, 91576, 91577, 91578, 91579, 91580, 91581, 91582, 91583, 91584, 91585, 91586, 91587, 91588, 91589, 91590, 91591, 91592, 91593, 91601, 91603, 91617, 91618, 91619, 91620, 91621, 91622, 91623, 91624, 91625, 91626, 91627, 91628, 91629, 91630, 91631, 91632, 91633, 91634, 91635, 91636, 91637, 91638, 91639, 91640, 91641, 91642, 91643, 91644, 91645, 91646, 91647, 91648, 91649, 91650, 91651, 91652, 91653, 91654, 91655, 91656, 91657, 91658, 91659, 91660, 91661, 91662, 91663, 91664, 91665, 91666, 91667, 91668, 91669, 91670, 91671, 91672, 91673, 91674, 91675, 91676, 91677, 91678, 91679, 91680, 91681, 91682, 91683, 91684, 91685, 91686, 91687, 91688, 91689, 91690, 91691, 91692, 91693, 91694, 91695, 91696, 91697, 91698, 91699, 91700, 91701, 91702, 91703, 91704, 91705, 91706, 91707, 91708, 91709, 91710, 91711, 91712, 91713, 91714, 91715, 91716, 91717, 91718, 91719, 91720, 91721, 91722, 91723, 91724, 91725, 91726, 91727, 91728, 91729, 91730, 91731, 91732, 91733, 91734, 91735, 91736, 91737, 91738, 91739, 91741, 91742, 91743, 91744, 91745, 91746, 91747, 91748, 91749, 91750, 91751, 91752, 91753, 91754, 91755, 91756, 91757, 91758, 91760, 91761, 91762, 91763, 91764, 91765, 91766, 91767, 91768, 91769, 91770, 91771, 91772, 91773, 91774, 91775, 91776, 91777, 91778, 91779, 91780, 91781, 91782, 91783, 91784, 91785, 91786, 91787, 91788, 91789, 91790, 91791, 91793, 91794, 91795, 91796, 91797, 91798, 91799, 91800, 91801, 91803, 91804, 91805, 91806, 91807, 91808, 91809, 91810, 91811, 91812, 91813, 91814, 91815, 91816, 91817, 91818, 91819, 91820, 91821, 91831, 91832, 91833, 91834, 91835, 91836, 91838, 91839, 91840, 91841, 91842, 91843, 91844, 91845, 91846, 91847, 91848, 91849, 91850, 91851, 91852, 91853, 91854, 91855, 91856, 91857, 91858, 91859, 91860, 91861, 91862, 91863, 91865, 91866, 91867, 91868, 91869, 91871, 91872, 91873, 91874, 91875, 91876, 91877, 91878, 91879, 91880, 91881, 91882, 91883, 91884, 91885, 91886, 91887, 91888, 91889, 91890, 91891, 91892, 91893, 91894, 91895, 91896, 91897, 91898, 91899, 91900, 91901, 91902, 91903, 91904, 91905, 91906, 91907, 91908, 91909, 91910, 91911, 91912, 91913, 91914, 91915, 91917, 91918, 91919, 91920, 91922, 91923, 91924, 91926, 91927, 91928, 91930, 91931, 91932, 91934, 91935, 91936, 91938, 91939, 91940, 91941, 91942, 91943, 91944, 91945, 91946, 91947, 91948, 91949, 91950, 91951, 91952, 91953, 91954, 91955, 91956, 91957, 91958, 91959, 91960, 91961, 91962, 91963, 91964, 91965, 91966, 91967, 91968, 91969, 91970, 91971, 91972, 91973, 91974, 91975, 91976, 91977, 91978, 91979, 91980, 91981, 91982, 91983, 91984, 91985, 91986, 91987, 91988, 91990, 91991, 91992, 91993, 91994, 91995, 91996, 91997, 91999, 92000, 92001, 92002, 92003, 92004, 92005, 92006, 92007, 92008, 92009, 92010, 92011, 92012, 92013, 92014, 92015, 92016, 92017, 92018, 92019, 92020, 92021, 92022, 92023, 92024, 92025, 92026, 92027, 92028, 92029, 92030, 92031, 92037, 92038, 92039, 92040, 92042, 92048, 92050, 92052, 92053, 92056, 92058, 92061, 92062, 92063, 92065, 92067, 92072, 92073, 92075, 92077, 92078, 92080, 92082, 92086, 92087, 92089, 92090, 92091, 92094, 92095, 92096, 92097, 92098, 92099, 92100, 92101, 92102, 92103, 92104, 92105, 92106, 92107, 92108, 92109, 92110, 92111, 92112, 92113, 92114, 92115, 92116, 92117, 92118, 92119, 92121, 92122, 92123, 92124, 92125, 92126, 92127, 92128, 92129, 92130, 92131, 92132, 92133, 92134, 92135, 92136, 92137, 92138, 92139, 92140, 92141, 92142, 92143, 92144, 92145, 92146, 92147, 92148, 92149, 92150, 92151, 92152, 92153, 92154, 92155, 92156, 92157, 92158, 92159, 92160, 92161, 92162, 92163, 92164, 92166, 92167, 92168, 92169, 92170, 92171, 92172, 92173, 92174, 92175, 92177, 92178, 92179, 92180, 92181, 92182, 92183, 92184, 92186, 92187, 92189, 92190, 92191, 92192, 92193, 92194, 92195, 92196, 92197, 92198, 92199, 92200, 92201, 92202, 92203, 92204, 92205, 92206, 92207, 92208, 92209, 92210, 92211, 92212, 92213, 92214, 92215, 92216, 92217, 92218, 92219, 92221, 92222, 92223, 92225, 92228, 92229, 92230, 92231, 92232, 92233, 92234, 92235, 92237, 92238, 92240, 92241, 92242, 92243, 92244, 92245, 92246, 92247, 92248, 92249, 92250, 92251, 92252, 92253, 92254, 92255, 92256, 92257, 92258, 92259, 92260, 92261, 92262, 92264, 92265, 92266, 92267, 92268, 92269, 92270, 92271, 92272, 92274, 92275, 92276, 92277, 92278, 92280, 92282, 92283, 92284, 92285, 92286, 92287, 92288, 92289, 92290, 92291, 92292, 92294, 92295, 92296, 92297, 92298, 92299, 92300, 92301, 92302, 92303, 92304, 92305, 92306, 92307, 92308, 92309, 92310, 92311, 92312, 92313, 92314, 92315, 92316, 92317, 92318, 92319, 92320, 92321, 92322, 92323, 92325, 92326, 92328, 92330, 92332, 92335, 92338, 92339, 92341, 92343, 92348, 92349, 92352, 92353, 92357, 92358, 92359, 92361, 92362, 92364, 92365, 92366, 92367, 92368, 92369, 92370, 92371, 92372, 92373, 92374, 92375, 92376, 92377, 92378, 92379, 92380, 92381, 92382, 92383, 92384, 92385, 92386, 92387, 92388, 92390, 92391, 92392, 92393, 92394, 92395, 92396, 92397, 92398, 92399, 92400, 92401, 92402, 92403, 92404, 92405, 92406, 92407, 92408, 92409, 92410, 92411, 92412, 92413, 92414, 92415, 92416, 92417, 92418, 92419, 92420, 92421, 92422, 92423, 92424, 92425, 92426, 92427, 92428, 92429, 92430, 92431, 92432, 92433, 92434, 92435, 92436, 92437, 92438, 92439, 92440, 92441, 92442, 92443, 92444, 92445, 92446, 92447, 92448, 92449, 92450, 92451, 92452, 92453, 92454, 92455, 92456, 92457, 92458, 92459, 92460, 92461, 92462, 92463, 92464, 92465, 92466, 92467, 92468, 92469, 92471, 92472, 92473, 92474, 92476, 92477, 92478, 92479, 92480, 92481, 92482, 92483, 92484, 92486, 92487, 92488, 92489, 92490, 92492, 92495, 92496, 92497, 92498, 92506, 92509, 92510, 92513, 92517, 92518, 92519, 92520, 92521, 92522, 92523, 92524, 92525, 92526, 92527, 92529, 92530, 92534, 92536, 92539, 92540, 92542, 92543, 92544, 92548, 92550, 92551, 92552, 92553, 92554, 92556, 92557, 92559, 92560, 92562, 92564, 92565, 92566, 92567, 92568, 92571, 92572, 92573, 92574, 92575, 92577, 92578, 92579, 92584, 92585, 92586, 92589, 92591, 92592, 92593, 92594, 92595, 92596, 92598, 92601, 92602, 92603, 92605, 92608, 92609, 92610, 92611, 92612, 92613, 92614, 92615, 92616, 92617, 92618, 92619, 92620, 92621, 92622, 92623, 92624, 92625, 92627, 92629, 92630, 92631, 92632, 92633, 92634, 92635, 92636, 92637, 92638, 92639, 92640, 92641, 92642, 92643, 92644, 92645, 92646, 92647, 92648, 92649, 92650, 92651, 92652, 92653, 92654, 92655, 92656, 92657, 92658, 92659, 92660, 92661, 92662, 92663, 92665, 92666, 92667, 92668, 92670, 92671, 92672, 92673, 92675, 92676, 92677, 92679, 92680, 92681, 92683, 92684, 92685, 92686, 92687, 92688, 92689, 92690, 92691, 92693, 92694, 92695, 92696, 92697, 92698, 92699, 92700, 92701, 92702, 92703, 92704, 92705, 92706, 92707, 92708, 92709, 92710, 92711, 92712, 92713, 92714, 92715, 92716, 92717, 92718, 92719, 92721, 92722, 92723, 92724, 92725, 92726, 92727, 92728, 92729, 92731, 92732, 92733, 92734, 92735, 92736, 92737, 92738, 92739, 92740, 92741, 92743, 92744, 92745, 92746, 92749, 92750, 92751, 92752, 92753, 92754, 92755, 92757, 92758, 92759, 92760, 92761, 92765, 92767, 92768, 92769, 92771, 92774, 92776, 92777, 92779, 92780, 92781, 92782, 92783, 92784, 92785, 92787, 92788, 92789, 92790, 92791, 92792, 92793, 92794, 92795, 92797, 92798, 92799, 92800, 92801, 92802, 92803, 92804, 92805, 92806, 92807, 92808, 92809, 92810, 92811, 92812, 92813, 92815, 92816, 92817, 92819, 92820, 92821, 92822, 92823, 92824, 92825, 92826, 92827, 92828, 92830, 92831, 92832, 92833, 92834, 92835, 92836, 92837, 92838, 92839, 92840, 92841, 92842, 92843, 92844, 92845, 92846, 92848, 92849, 92850, 92851, 92852, 92854, 92855, 92856, 92857, 92858, 92859, 92860, 92861, 92863, 92864, 92866, 92869, 92871, 92872, 92873, 92875, 92879, 92880, 92882, 92884, 92886, 92887, 92888, 92889, 92890, 92891, 92892, 92893, 92894, 92895, 92896, 92897, 92898, 92899, 92900, 92901, 92902, 92903, 92904, 92905, 92910, 92911, 92912, 92913, 92914, 92915, 92916, 92917, 92918, 92919, 92920, 92921, 92922, 92923, 92924, 92925, 92926, 92927, 92928, 92929, 92930, 92931, 92933, 92934, 92935, 92936, 92937, 92938, 92939, 92940, 92941, 92942, 92944, 92945, 92946, 92948, 92949, 92950, 92951, 92952, 92953, 92954, 92955, 92956, 92957, 92958, 92960, 92961, 92962, 92963, 92964, 92965, 92966, 92967, 92968, 92969, 92970, 92971, 92972, 92973, 92974, 92975, 92976, 92977, 92978, 92979, 92980, 92981, 92982, 92983, 92984, 92985, 92986, 92987, 92988, 92989, 92990, 92991, 92992, 92993, 92994, 92995, 92996, 92997, 92998, 92999, 93000, 93003, 93004, 93005, 93006, 93007, 93008, 93009, 93010, 93011, 93012, 93013, 93014, 93016, 93017, 93019, 93021, 93022, 93026, 93027, 93030, 93031, 93033, 93034, 93037, 93039, 93040, 93041, 93042, 93043, 93044, 93045, 93046, 93047, 93048, 93049, 93050, 93051, 93052, 93053, 93054, 93055, 93056, 93057, 93058, 93059, 93060, 93061, 93062, 93063, 93064, 93065, 93067, 93068, 93069, 93070, 93071, 93072, 93073, 93074, 93075, 93076, 93077, 93078, 93079, 93080, 93081, 93082, 93083, 93084, 93085, 93086, 93087, 93088, 93089, 93090, 93091, 93092, 93093, 93094, 93095, 93096, 93097, 93098, 93099, 93100, 93101, 93102, 93103, 93104, 93105, 93107, 93108, 93109, 93110, 93112, 93114, 93116, 93117, 93118, 93119, 93120, 93121, 93122, 93123, 93125, 93126, 93127, 93128, 93129, 93131, 93132, 93133, 93134, 93137, 93138, 93140, 93141, 93142, 93143, 93144, 93145, 93146, 93147, 93148, 93149, 93150, 93151, 93152, 93153, 93163, 93164, 93166, 93167, 93169, 93170, 93174, 93175, 93176, 93177, 93178, 93179, 93180, 93181, 93182, 93183, 93184, 93185, 93186, 93187, 93189, 93190, 93191, 93192, 93194, 93195, 93197, 93199, 93200, 93201, 93202, 93203, 93204, 93205, 93206, 93207, 93208, 93209, 93210, 93211, 93212, 93213, 93214, 93215, 93216, 93217, 93218, 93219, 93220, 93221, 93222, 93223, 93224, 93225, 93226, 93227, 93228, 93229, 93230, 93231, 93232, 93233, 93234, 93235, 93236, 93237, 93239, 93241, 93242, 93243, 93244, 93245, 93246, 93247, 93248, 93250, 93251, 93252, 93253, 93254, 93255, 93256, 93257, 93258, 93259, 93260, 93261, 93262, 93263, 93264, 93265, 93266, 93267, 93268, 93269, 93271, 93272, 93273, 93274, 93275, 93276, 93277, 93278, 93279, 93280, 93281, 93282, 93283, 93284, 93285, 93286, 93287, 93288, 93289, 93290, 93291, 93292, 93293, 93294, 93295, 93297, 93298, 93299, 93300, 93301, 93302, 93303, 93304, 93305, 93306, 93307, 93308, 93309, 93310, 93311, 93312, 93313, 93314, 93315, 93316, 93318, 93319, 93320, 93322, 93323, 93324, 93325, 93326, 93327, 93328, 93329, 93330, 93331, 93332, 93333, 93334, 93335, 93336, 93337, 93338, 93339, 93340, 93341, 93342, 93344, 93345, 93346, 93347, 93348, 93349, 93350, 93351, 93352, 93353, 93354, 93355, 93356, 93357, 93358, 93359, 93360, 93361, 93362, 93363, 93364, 93365, 93366, 93367, 93369, 93370, 93371, 93372, 93373, 93374, 93375, 93376, 93377, 93378, 93379, 93380, 93381, 93382, 93383, 93384, 93385, 93386, 93387, 93388, 93389, 93390, 93391, 93392, 93393, 93394, 93395, 93396, 93397, 93398, 93399, 93400, 93401, 93402, 93403, 93404, 93405, 93406, 93407, 93408, 93409, 93410, 93411, 93412, 93413, 93414, 93415, 93416, 93417, 93418, 93419, 93420, 93421, 93422, 93423, 93424, 93425, 93426, 93427, 93428, 93429, 93430, 93431, 93432, 93433, 93434, 93435, 93436, 93437, 93438, 93439, 93440, 93441, 93442, 93443, 93444, 93445, 93447, 93448, 93449, 93450, 93451, 93452, 93453, 93454, 93455, 93456, 93457, 93458, 93459, 93462, 93463, 93464, 93465, 93466, 93467, 93468, 93469, 93470, 93471, 93472, 93473, 93474, 93475, 93476, 93477, 93478, 93479, 93480, 93481, 93482, 93483, 93484, 93485, 93486, 93487, 93488, 93489, 93490, 93491, 93492, 93493, 93494, 93495, 93497, 93498, 93499, 93500, 93501, 93502, 93503, 93504, 93505, 93506, 93507, 93508, 93509, 93510, 93511, 93512, 93513, 93514, 93515, 93516, 93517, 93518, 93519, 93520, 93521, 93522, 93523, 93524, 93525, 93526, 93527, 93528, 93529, 93530, 93531, 93533, 93534, 93535, 93536, 93537, 93538, 93539, 93540, 93541, 93542, 93543, 93544, 93545, 93546, 93547, 93548, 93549, 93550, 93551, 93552, 93553, 93554, 93555, 93556, 93557, 93558, 93559, 93560, 93561, 93562, 93563, 93564, 93565, 93566, 93567, 93568, 93569, 93570, 93571, 93572, 93573, 93574, 93575, 93576, 93577, 93578, 93579, 93580, 93581, 93582, 93583, 93584, 93585, 93586, 93587, 93588, 93589, 93590, 93591, 93592, 93593, 93594, 93596, 93597, 93599, 93600, 93601, 93602, 93603, 93604, 93605, 93606, 93607, 93608, 93610, 93611, 93612, 93613, 93614, 93616, 93617, 93618, 93619, 93620, 93621, 93622, 93623, 93624, 93625, 93626, 93627, 93628, 93629, 93630, 93631, 93632, 93633, 93634, 93635, 93636, 93637, 93638, 93639, 93640, 93641, 93642, 93643, 93644, 93645, 93646, 93647, 93648, 93649, 93650, 93651, 93652, 93653, 93654, 93655, 93656, 93657, 93659, 93660, 93661, 93662, 93663, 93664, 93665, 93667, 93668, 93669, 93670, 93671, 93672, 93673, 93675, 93676, 93677, 93679, 93680, 93681, 93682, 93683, 93685, 93687, 93688, 93689, 93690, 93691, 93692, 93693, 93695, 93696, 93697, 93698, 93699, 93700, 93701, 93704, 93705, 93706, 93707, 93709, 93710, 93711, 93712, 93713, 93714, 93715, 93716, 93717, 93718, 93719, 93721, 93724, 93725, 93726, 93727, 93728, 93729, 93730, 93731, 93732, 93733, 93734, 93735, 93736, 93737, 93738, 93739, 93740, 93741, 93742, 93743, 93744, 93745, 93746, 93747, 93748, 93749, 93750, 93751, 93752, 93753, 93754, 93755, 93756, 93757, 93758, 93759, 93760, 93761, 93762, 93763, 93764, 93765, 93766, 93767, 93768, 93769, 93771, 93772, 93773, 93774, 93775, 93776, 93777, 93778, 93779, 93780, 93782, 93783, 93784, 93786, 93787, 93788, 93789, 93790, 93791, 93792, 93793, 93796, 93797, 93798, 93799, 93800, 93801, 93802, 93803, 93804, 93805, 93808, 93809, 93810, 93811, 93812, 93813, 93814, 93815, 93816, 93817, 93818, 93819, 93820, 93821, 93822, 93823, 93824, 93825, 93826, 93827, 93828, 93829, 93830, 93831, 93832, 93833, 93834, 93835, 93836, 93837, 93838, 93839, 93840, 93841, 93842, 93843, 93844, 93845, 93846, 93847, 93848, 93849, 93850, 93852, 93853, 93854, 93855, 93856, 93858, 93859, 93860, 93861, 93862, 93863, 93928, 93929, 93930, 93960, 93962, 93963, 93964, 93965, 93966, 93967, 93968, 93969, 93972, 93973, 93974, 93975, 93976, 93977)
limit 1
        ";
        $result = mysql_query($query) or die( mysql_error() );

        while ( $row = mysql_fetch_assoc( $result ) ){
            $googleInfo = $this->getGoogleLocationInfo( $row['Name'], $row['Country'] );
            $tmp = $this->getGoogleLocationResponseKey( $googleInfo );

            if ( $tmp['key'] == -1 ){
                echo "Notype"."\n\n";
                var_dump( $googleInfo );
                die();
            }

            $aUpdate = array(
                'State' => 'Created',
                'LocationType' => $tmp['key_string_value'],
                'Longitude' => $googleInfo->results[$tmp['key']]->geometry->location->lng,
                'Latitude' => $googleInfo->results[$tmp['key']]->geometry->location->lat
            );

            $this->getResponseArrUpdate( $googleInfo->results[$tmp['key']], $tmp['key_string_value'], $aUpdate );

            $dupResult = mysql_fetch_assoc( mysql_query( "SELECT count(ID) as cnt FROM location WHERE GName = '" . $aUpdate['GName'] . "'" ) );

            if ( $dupResult['cnt'] > 0 ){
                echo $aUpdate['GName'].'['.$row['ID'].'] - Gted' . "\n";
                continue;
            }

            $set = array();
            foreach ( $aUpdate AS $auk => $auv ){
                $set[] = $auk . " = '". addslashes($auv) . "'";
            }

            $query = "UPDATE location SET " . join(', ', $set) . " WHERE ID = " . $row['ID'];
            echo $query."<br />\n";
            mysql_query( $query );
        }
    }

    public function processLocationByProductLatLngAction(){
        $c1 = mysql_connect('54.197.247.82', 'root', '4eVfWDdP');
        mysql_select_db('razor', $c1);

        $c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        mysql_select_db('razor', $c2);


        $query = "select p.* from location as l
inner join product as p on (p.LocationID = l.ID)
WHERE l.ID in (44810,
34935,
10915,
10880,
34899
)
GROUP BY p.LocationID
";
        $result = mysql_query($query, $c1);

        if ( mysql_num_rows($result) == 0 ) {
            return;
        }
        while ( $row = mysql_fetch_assoc($result) ){
            $googleInfo = $this->getGoogleLocationLatLngInfo( $row['Latitude'], $row['Longitude'] );
            $tmp = $this->getGoogleLocationResponseKey( $googleInfo );

            if ( $tmp['key'] == -1 ){
                echo "Notype"."\n\n";
                var_dump( $googleInfo );
                die();
            }

            $aUpdate = array(
                'State' => 'Created',
                'LocationType' => $tmp['key_string_value'],
                'Longitude' => $googleInfo->results[$tmp['key']]->geometry->location->lng,
                'Latitude' => $googleInfo->results[$tmp['key']]->geometry->location->lat
            );

            $this->getResponseArrUpdate( $googleInfo->results[$tmp['key']], $tmp['key_string_value'], $aUpdate );

            $set = array();
            foreach ( $aUpdate AS $auk => $auv ){
                $set[] = $auk . " = '". addslashes($auv) . "'";
            }

            $query = "UPDATE location SET " . join(', ', $set) . " WHERE ID = " . $row['LocationID'];
            echo $query."<br />\n";
            mysql_query( $query, $c2 );
        }

        echo "END !!!";
    }

    public function processParentZeroAction(){
        // Uat
        //$c2 = mysql_connect('uatdb.mybookingpal.com', 'pavel', 'password');
        //mysql_select_db('razor', $c2);

        $c2 = mysql_connect('54.197.247.82', 'root', '4eVfWDdP');
        mysql_select_db('razor', $c2);

        $query = "
SELECT
	*
FROM
	location
WHERE
	( ParentID = 0 OR ISNULL(ParentID) )
AND State = 'Created'
ORDER BY
	ID DESC";
        $result = mysql_query($query);
        echo 'Need to process: ' . mysql_num_rows($result)."<br />\n";

        $i = 1;
        while ( $row = mysql_fetch_assoc($result) ){
            echo 'Processing: ' . $i . ' item - ' . $row['Name'] . '['.$row['ID'].'] | ' . $row['Country'] . '<br />'."\n";
            $googleInfo = $this->getGoogleLocationInfo( $row['Name'], $row['Country'] );
            $tmp = $this->getGoogleLocationResponseKey( $googleInfo );

            if ( $googleInfo->status == "ZERO_RESULTS" ) {
                $query = "UPDATE location SET State = 'Zeroresults' WHERE ID = '" . $row['ID'] . "'";
                mysql_query($query) or die( mysql_error() );
                continue;
            }

            if ( $tmp['key'] == -1 ){
                var_dump( $row );
                $query = 'UPDATE location set State = "Notype" WHERE ID = ' . $row['ID'];
                echo $query . "<br />\n";
                die( 'key = -1' );
                // mysql_query( $query ) or die (mysql_error());
            }

            $aUpdate = array(
                'State' => 'Created',
                'LocationType' => $tmp['key_string_value'],
                'Longitude' => $googleInfo->results[$tmp['key']]->geometry->location->lng,
                'Latitude' => $googleInfo->results[$tmp['key']]->geometry->location->lat
            );

            $this->getResponseArrUpdate( $googleInfo->results[$tmp['key']], $tmp['key_string_value'], $aUpdate );

            $set = array();
            foreach ( $aUpdate AS $auk => $auv ){
                $set[] = $auk . " = '". addslashes($auv) . "'";
            }

            // Update current location
            $query = "UPDATE location SET " . join(', ', $set) . " WHERE ID = " . $row['ID'];
            echo $query."<br />\n";
            // mysql_query($query) or die( mysql_errno() . ' - ' . mysql_error() );

            // Try to find parent location
            $query = "SELECT
	ID
FROM
	location
WHERE
	GName = '" . $aUpdate['GName'] . "' and
	Latitude = '" . $aUpdate['Latitude'] . "' and
	Longitude = '" . $aUpdate['Longitude'] . "' and
	State = 'Created' and
	ID = ParentID;";
            $tmp_result = mysql_query($query);

            mysql_query("BEGIN");
            try{
                if ( mysql_num_rows( $tmp_result ) > 0 ){
                    echo 'Parent found<br />';

                    // If we found parent for location then update products for current location
                    $tmp_row = mysql_fetch_assoc($tmp_result);
                    $query = "UPDATE location SET State = 'Duplicated' WHERE ID = " . $row['ID'];
                    // mysql_query($query) or die( mysql_errno() . ' - ' . mysql_error() );
                    $query = "UPDATE product SET LocationID = '" . $tmp_row['ID'] . "' WHERE LocationID = " . $row['ID'];
                    // mysql_query($query) or die( mysql_errno() . ' - ' . mysql_error() );
                } else {
                    echo 'This is parent<br />';
                    $query = "UPDATE location SET ParentID = " . $row['ID'] ." WHERE ID = " . $row['ID'];
                    // mysql_query($query) or die( mysql_errno() . ' - ' . mysql_error() );
                }
            } catch (Exception $e){
                mysql_query("ROLLBACK");
            }
            mysql_query("COMMIT");

            die();

            // mysql_query($query);
            $i++;
        }
    }
}